name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  # schedule:
  #   - cron: "0 0 * * *"
  workflow_dispatch:
    inputs:
      version:
        description: "TDEngine version to build against"
        required: true
        default: "3.3.7.5"
        type: string
  push:
    # branches: ["master"]
    # Publish semver tags as releases.
    tags: ["*"]
  # pull_request:
  #   branches: ["master"]
  # paths:
  # - 'VERSION'  # 当 VERSION 文件变化时也触发

env:
  # Use docker.io for Docker Hub if empty
  # REGISTRY: ghcr.io
  REGISTRY: docker.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  VERSION: ${{ github.event.inputs.version || github.ref_name }}
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.5.0 #v3.5.0
        with:
          cosign-release: "v2.2.4"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3 # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          # username: ${{ github.actor }}
          # password: ${{ secrets.GITHUB_TOKEN }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ env.VERSION }}
            type=raw,value=latest

      # # Get Previous tag
      # # https://github.com/marketplace/actions/get-latest-tag
      # - name: 'Get Previous tag'
      #   id: previoustag
      #   uses: "WyriHaximus/github-action-get-previous-tag@v1"
      #   env:
      #     GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      # # Get next patch version
      # # https://github.com/WyriHaximus/github-action-next-semvers
      # - name: Get next patch version
      #   id: semver
      #   uses: WyriHaximus/github-action-next-semvers@v1
      #   with:
      #     # version: ${{ steps.previoustag.outputs.tag }}
      #     version: 2.2.1  # 基于最新标签生成下一版本

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      # https://docs.docker.com/build/ci/github-actions/multi-platform/
      # https://docs.docker.com/build/building/variables/#pre-defined-build-arguments
      # TARGETPLATFORM=linux/amd64、linux/arm64、linux/arm/v7
      # TARGETOS=linux、windows、darwin
      # TARGETARCH=amd64/arm64/arm/386/ppc64le/s390x
      # TARGETVARIANT=v7/v8
      # BUILDPLATFORM
      # BUILDOS
      # BUILDARCH
      # BUILDVARIANT
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5 # v5.0.0
        with:
          context: .
          # file: ./Dockerfile
          platforms: linux/amd64,linux/arm64/v8
          push: ${{ github.event_name != 'pull_request' }}
          # tags: |
          # ${{ secrets.DOCKERHUB_USERNAME }}/nfs-server-alpine:latest
          # ${{ secrets.DOCKERHUB_USERNAME }}/nfs-server-alpine:${{ steps.semver.outputs.patch }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ env.VERSION }}
            UBUNTU_REPO=archive.ubuntu.com
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # # Sign the resulting Docker image digest except on PRs.
      # # This will only write to the public Rekor transparency log when the Docker
      # # repository is public to avoid leaking data.  If you would like to publish
      # # transparency data even for private images, pass --force to cosign below.
      # # https://github.com/sigstore/cosign
      # - name: Sign the published Docker image
      #   if: ${{ github.event_name != 'pull_request' }}
      #   env:
      #     # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
      #     TAGS: ${{ steps.meta.outputs.tags }}
      #     # tags: |
      #     #   ${{ secrets.DOCKERHUB_USERNAME }}/nfs-server-alpine:latest
      #     #   ${{ secrets.DOCKERHUB_USERNAME }}/nfs-server-alpine:${{ steps.semver.outputs.patch }}
      #     DIGEST: ${{ steps.build-and-push.outputs.digest }}
      #   # This step uses the identity token to provision an ephemeral certificate
      #   # against the sigstore community Fulcio instance.
      #   run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
